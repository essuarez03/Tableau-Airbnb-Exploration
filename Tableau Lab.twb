<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20243.24.1010.1014                               -->
<workbook original-version='18.1' source-build='2024.3.0 (20243.24.1010.1014)' source-platform='win' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <AccessibleZoneTabOrder />
    <AnimationOnByDefault />
    <AutoCreateAndUpdateDSDPhoneLayouts />
    <IntuitiveSorting />
    <IntuitiveSorting_SP2 />
    <MapboxVectorStylesAndLayers />
    <MarkAnimation />
    <ObjectModelEncapsulateLegacy />
    <ObjectModelTableType />
    <SchemaViewerObjectModel />
    <SetMembershipControl />
    <SheetIdentifierTracking />
    <SortTagCleanup />
    <WindowsPersistSimpleIdentifiers />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource caption='Airbnb_listing' inline='true' name='federated.0f4ssrh1y2bh0s12kul5x14vekgt' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='Airbnb_listing' name='textscan.10jiu9t0t2kb3c15jvqpe1k6oehp'>
            <connection class='textscan' directory='C:/Users/roboz/Downloads' filename='Airbnb_listing.csv' password='' server='' />
          </named-connection>
        </named-connections>
        <relation connection='textscan.10jiu9t0t2kb3c15jvqpe1k6oehp' name='Airbnb_listing.csv' table='[Airbnb_listing#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
            <column datatype='real' name='id' ordinal='0' />
            <column datatype='string' name='name' ordinal='1' />
            <column datatype='integer' name='host_id' ordinal='2' />
            <column datatype='string' name='host_name' ordinal='3' />
            <column datatype='date' name='host_since' ordinal='4' />
            <column datatype='string' name='neighbourhood' ordinal='5' />
            <column datatype='string' name='neighbourhood_group' ordinal='6' />
            <column datatype='real' name='latitude' ordinal='7' />
            <column datatype='real' name='longitude' ordinal='8' />
            <column datatype='string' name='room_type' ordinal='9' />
            <column datatype='integer' name='accommodates' ordinal='10' />
            <column datatype='string' name='bathrooms_text' ordinal='11' />
            <column datatype='integer' name='bedrooms' ordinal='12' />
            <column datatype='integer' name='beds' ordinal='13' />
            <column datatype='real' name='price' ordinal='14' />
            <column datatype='integer' name='number_of_reviews' ordinal='15' />
            <column datatype='date' name='last_review' ordinal='16' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[Airbnb_listing.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>id</remote-name>
            <remote-type>5</remote-type>
            <local-name>[id]</local-name>
            <parent-name>[Airbnb_listing.csv]</parent-name>
            <remote-alias>id</remote-alias>
            <ordinal>0</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <object-id>[Airbnb_listing.csv_64E5AAB808954A5D9005B188EA12273A]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>name</remote-name>
            <remote-type>129</remote-type>
            <local-name>[name]</local-name>
            <parent-name>[Airbnb_listing.csv]</parent-name>
            <remote-alias>name</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <object-id>[Airbnb_listing.csv_64E5AAB808954A5D9005B188EA12273A]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>host_id</remote-name>
            <remote-type>20</remote-type>
            <local-name>[host_id]</local-name>
            <parent-name>[Airbnb_listing.csv]</parent-name>
            <remote-alias>host_id</remote-alias>
            <ordinal>2</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <object-id>[Airbnb_listing.csv_64E5AAB808954A5D9005B188EA12273A]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>host_name</remote-name>
            <remote-type>129</remote-type>
            <local-name>[host_name]</local-name>
            <parent-name>[Airbnb_listing.csv]</parent-name>
            <remote-alias>host_name</remote-alias>
            <ordinal>3</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <object-id>[Airbnb_listing.csv_64E5AAB808954A5D9005B188EA12273A]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>host_since</remote-name>
            <remote-type>133</remote-type>
            <local-name>[host_since]</local-name>
            <parent-name>[Airbnb_listing.csv]</parent-name>
            <remote-alias>host_since</remote-alias>
            <ordinal>4</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <object-id>[Airbnb_listing.csv_64E5AAB808954A5D9005B188EA12273A]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>neighbourhood</remote-name>
            <remote-type>129</remote-type>
            <local-name>[neighbourhood]</local-name>
            <parent-name>[Airbnb_listing.csv]</parent-name>
            <remote-alias>neighbourhood</remote-alias>
            <ordinal>5</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <object-id>[Airbnb_listing.csv_64E5AAB808954A5D9005B188EA12273A]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>neighbourhood_group</remote-name>
            <remote-type>129</remote-type>
            <local-name>[neighbourhood_group]</local-name>
            <parent-name>[Airbnb_listing.csv]</parent-name>
            <remote-alias>neighbourhood_group</remote-alias>
            <ordinal>6</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <object-id>[Airbnb_listing.csv_64E5AAB808954A5D9005B188EA12273A]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>latitude</remote-name>
            <remote-type>5</remote-type>
            <local-name>[latitude]</local-name>
            <parent-name>[Airbnb_listing.csv]</parent-name>
            <remote-alias>latitude</remote-alias>
            <ordinal>7</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <object-id>[Airbnb_listing.csv_64E5AAB808954A5D9005B188EA12273A]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>longitude</remote-name>
            <remote-type>5</remote-type>
            <local-name>[longitude]</local-name>
            <parent-name>[Airbnb_listing.csv]</parent-name>
            <remote-alias>longitude</remote-alias>
            <ordinal>8</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <object-id>[Airbnb_listing.csv_64E5AAB808954A5D9005B188EA12273A]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>room_type</remote-name>
            <remote-type>129</remote-type>
            <local-name>[room_type]</local-name>
            <parent-name>[Airbnb_listing.csv]</parent-name>
            <remote-alias>room_type</remote-alias>
            <ordinal>9</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <object-id>[Airbnb_listing.csv_64E5AAB808954A5D9005B188EA12273A]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>accommodates</remote-name>
            <remote-type>20</remote-type>
            <local-name>[accommodates]</local-name>
            <parent-name>[Airbnb_listing.csv]</parent-name>
            <remote-alias>accommodates</remote-alias>
            <ordinal>10</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <object-id>[Airbnb_listing.csv_64E5AAB808954A5D9005B188EA12273A]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>bathrooms_text</remote-name>
            <remote-type>129</remote-type>
            <local-name>[bathrooms_text]</local-name>
            <parent-name>[Airbnb_listing.csv]</parent-name>
            <remote-alias>bathrooms_text</remote-alias>
            <ordinal>11</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <object-id>[Airbnb_listing.csv_64E5AAB808954A5D9005B188EA12273A]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>bedrooms</remote-name>
            <remote-type>20</remote-type>
            <local-name>[bedrooms]</local-name>
            <parent-name>[Airbnb_listing.csv]</parent-name>
            <remote-alias>bedrooms</remote-alias>
            <ordinal>12</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <object-id>[Airbnb_listing.csv_64E5AAB808954A5D9005B188EA12273A]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>beds</remote-name>
            <remote-type>20</remote-type>
            <local-name>[beds]</local-name>
            <parent-name>[Airbnb_listing.csv]</parent-name>
            <remote-alias>beds</remote-alias>
            <ordinal>13</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <object-id>[Airbnb_listing.csv_64E5AAB808954A5D9005B188EA12273A]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>price</remote-name>
            <remote-type>5</remote-type>
            <local-name>[price]</local-name>
            <parent-name>[Airbnb_listing.csv]</parent-name>
            <remote-alias>price</remote-alias>
            <ordinal>14</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <object-id>[Airbnb_listing.csv_64E5AAB808954A5D9005B188EA12273A]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>number_of_reviews</remote-name>
            <remote-type>20</remote-type>
            <local-name>[number_of_reviews]</local-name>
            <parent-name>[Airbnb_listing.csv]</parent-name>
            <remote-alias>number_of_reviews</remote-alias>
            <ordinal>15</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <object-id>[Airbnb_listing.csv_64E5AAB808954A5D9005B188EA12273A]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>last_review</remote-name>
            <remote-type>133</remote-type>
            <local-name>[last_review]</local-name>
            <parent-name>[Airbnb_listing.csv]</parent-name>
            <remote-alias>last_review</remote-alias>
            <ordinal>16</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <object-id>[Airbnb_listing.csv_64E5AAB808954A5D9005B188EA12273A]</object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='string' name='[:Measure Names]' role='dimension' type='nominal'>
        <aliases>
          <alias key='&quot;[federated.0f4ssrh1y2bh0s12kul5x14vekgt]&quot;' value='Price' />
          <alias key='&quot;[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[sum:number_of_reviews:qk]&quot;' value='Reviews' />
        </aliases>
      </column>
      <column datatype='string' name='[Neighbourhood (group)]' role='dimension' type='nominal'>
        <calculation class='categorical-bin' column='[neighbourhood]' default='&quot;Other&quot;' new-bin='true'>
          <bin default-name='true' value='&quot;Rockaway Beach&quot;'>
            <value>&quot;Rockaway Beach&quot;</value>
          </bin>
        </calculation>
      </column>
      <column caption='Airbnb_listing.csv' datatype='table' name='[__tableau_internal_object_id__].[Airbnb_listing.csv_64E5AAB808954A5D9005B188EA12273A]' role='measure' type='quantitative' />
      <column caption='Accommodates' datatype='integer' name='[accommodates]' role='measure' type='quantitative' />
      <column caption='Bathrooms Text' datatype='string' name='[bathrooms_text]' role='dimension' type='nominal' />
      <column caption='Bedrooms' datatype='integer' name='[bedrooms]' role='measure' type='quantitative' />
      <column caption='Beds' datatype='integer' name='[beds]' role='measure' type='quantitative' />
      <column caption='Host Id' datatype='integer' name='[host_id]' role='dimension' type='ordinal' />
      <column caption='Host Name' datatype='string' name='[host_name]' role='dimension' type='nominal' />
      <column caption='Host Since' datatype='date' name='[host_since]' role='dimension' type='ordinal' />
      <column caption='Id' datatype='real' name='[id]' role='dimension' type='ordinal' />
      <column caption='Last Review' datatype='date' name='[last_review]' role='dimension' type='ordinal' />
      <column aggregation='Avg' caption='Latitude' datatype='real' name='[latitude]' role='measure' semantic-role='[Geographical].[Latitude]' type='quantitative' />
      <column aggregation='Avg' caption='Longitude' datatype='real' name='[longitude]' role='measure' semantic-role='[Geographical].[Longitude]' type='quantitative' />
      <column caption='Name' datatype='string' name='[name]' role='dimension' type='nominal' />
      <column caption='Neighbourhood' datatype='string' name='[neighbourhood]' role='dimension' type='nominal' />
      <column caption='Neighbourhood Group' datatype='string' name='[neighbourhood_group]' role='dimension' type='nominal'>
        <aliases>
          <alias key='&quot;Bronx&quot;' value='Bronx (AVG: 121.0)' />
          <alias key='&quot;Brooklyn&quot;' value='Brooklyn (AVG: 160.9)' />
          <alias key='&quot;Manhattan&quot;' value='Manhattan (AVG: 301.2)' />
          <alias key='&quot;Queens&quot;' value='Queens (AVG: 135.7)' />
          <alias key='&quot;Staten Island&quot;' value='Staten Island (AVG: 159.8)' />
        </aliases>
      </column>
      <column caption='Number Of Reviews' datatype='integer' name='[number_of_reviews]' role='measure' type='quantitative' />
      <column caption='Price' datatype='real' name='[price]' role='measure' type='quantitative' />
      <column caption='Room Type' datatype='string' name='[room_type]' role='dimension' type='nominal' />
      <column-instance column='[neighbourhood]' derivation='Attribute' name='[attr:neighbourhood:nk]' pivot='key' type='nominal' />
      <column-instance column='[price]' derivation='Attribute' name='[attr:price:qk]' pivot='key' type='quantitative' />
      <column-instance column='[price]' derivation='Avg' name='[avg:price:qk]' pivot='key' type='quantitative' />
      <column-instance column='[price]' derivation='Avg' name='[diff:avg:price:qk:1]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-type='Field' type='Difference'>
          <order field='[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[latitude]' />
          <order field='[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[longitude]' />
          <order field='[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[neighbourhood]' />
          <address>
            <value>-1</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[price]' derivation='Avg' name='[diff:avg:price:qk:2]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-type='Field' type='Difference'>
          <order field='[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[longitude]' />
          <order field='[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[neighbourhood]' />
          <address>
            <value>-1</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[price]' derivation='Avg' name='[diff:avg:price:qk:3]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-field='[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[neighbourhood]' ordering-type='Field' type='Difference'>
          <address>
            <value>-1</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[price]' derivation='Avg' name='[diff:avg:price:qk]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-type='Field' type='Difference'>
          <order field='[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[latitude]' />
          <order field='[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[longitude]' />
          <address>
            <value>-1</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[price]' derivation='Max' name='[max:price:qk]' pivot='key' type='quantitative' />
      <column-instance column='[price]' derivation='Min' name='[min:price:qk]' pivot='key' type='quantitative' />
      <column-instance column='[accommodates]' derivation='None' name='[none:accommodates:qk]' pivot='key' type='quantitative' />
      <column-instance column='[id]' derivation='None' name='[none:id:ok]' pivot='key' type='ordinal' />
      <column-instance column='[latitude]' derivation='None' name='[none:latitude:qk]' pivot='key' type='quantitative' />
      <column-instance column='[longitude]' derivation='None' name='[none:longitude:qk]' pivot='key' type='quantitative' />
      <column-instance column='[neighbourhood]' derivation='None' name='[none:neighbourhood:nk]' pivot='key' type='nominal' />
      <column-instance column='[price]' derivation='None' name='[none:price:qk]' pivot='key' type='quantitative' />
      <column-instance column='[accommodates]' derivation='Sum' name='[sum:accommodates:qk]' pivot='key' type='quantitative' />
      <column-instance column='[number_of_reviews]' derivation='Sum' name='[sum:number_of_reviews:qk]' pivot='key' type='quantitative' />
      <column-instance column='[price]' derivation='Sum' name='[sum:price:qk]' pivot='key' type='quantitative' />
      <group hidden='true' name='[Inclusions (Latitude,Longitude,Neighbourhood)]' name-style='unqualified' user:auto-column='include'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[none:latitude:qk]' />
          <groupfilter function='level-members' level='[none:longitude:qk]' />
          <groupfilter function='level-members' level='[none:neighbourhood:nk]' />
        </groupfilter>
      </group>
      <layout dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[attr:price:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[avg:price:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[diff:avg:price:qk:1]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[diff:avg:price:qk:2]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[diff:avg:price:qk:3]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[diff:avg:price:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[none:accommodates:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[sum:accommodates:qk]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[sum:number_of_reviews:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.0f4ssrh1y2bh0s12kul5x14vekgt]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[max:price:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[min:price:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[none:price:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[sum:price:qk]&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:id:ok]' type='palette'>
            <map to='#499894'>
              <bucket>13752309.0</bucket>
            </map>
            <map to='#499894'>
              <bucket>27371581.0</bucket>
            </map>
            <map to='#499894'>
              <bucket>51691170.0</bucket>
            </map>
            <map to='#499894'>
              <bucket>6.36e+17</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>105469.0</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>2578731.0</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>45861421.0</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>50773840.0</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>19710276.0</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>24993470.0</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>54000974.0</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>6.67e+17</bucket>
            </map>
            <map to='#79706e'>
              <bucket>34076756.0</bucket>
            </map>
            <map to='#79706e'>
              <bucket>36253150.0</bucket>
            </map>
            <map to='#79706e'>
              <bucket>40609969.0</bucket>
            </map>
            <map to='#79706e'>
              <bucket>7.57e+17</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>27225643.0</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>28560837.0</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>51692043.0</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>6.4e+17</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>12832062.0</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>20026248.0</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>5.72e+17</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>35843422.0</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>45117459.0</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>48489664.0</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>4792529.0</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>24825809.0</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>52353508.0</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>35275920.0</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>46943882.0</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>7.38e+17</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>13004996.0</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>24632456.0</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>50257676.0</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>5.76e+17</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>18595831.0</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>44070261.0</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>52307085.0</bucket>
            </map>
            <map to='#d37295'>
              <bucket>19673107.0</bucket>
            </map>
            <map to='#d37295'>
              <bucket>41226843.0</bucket>
            </map>
            <map to='#d37295'>
              <bucket>44491230.0</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>19747278.0</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>47173334.0</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>20286539.0</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>49931513.0</bucket>
            </map>
            <map to='#e15759'>
              <bucket>14707648.0</bucket>
            </map>
            <map to='#e15759'>
              <bucket>31979292.0</bucket>
            </map>
            <map to='#e15759'>
              <bucket>51945257.0</bucket>
            </map>
            <map to='#e15759'>
              <bucket>6.62e+17</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>13331100.0</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>25138975.0</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>6.09e+17</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>7.26e+17</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>3156969.0</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>14220422.0</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>47141317.0</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>52592514.0</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>19673318.0</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>43869863.0</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>45308987.0</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>15570322.0</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>36145317.0</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>52240499.0</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>6.69e+17</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>3652230.0</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>17178852.0</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>52648586.0</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>6.44e+17</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:neighbourhood:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Briarwood&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Jamaica Estates&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Sunnyside&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Arverne&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Fresh Meadows&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Rego Park&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Bayswater&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Holliswood&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Rosedale&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Ditmars Steinway&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Laurelton&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Cambria Heights&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Jamaica Hills&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Whitestone&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Belle Harbor&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Howard Beach&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;South Ozone Park&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Flushing&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Ozone Park&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Astoria&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Glendale&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Richmond Hill&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Elmhurst&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Middle Village&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Bellerose&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Jackson Heights&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Springfield Gardens&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Douglaston&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Little Neck&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;East Elmhurst&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Long Island City&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Far Rockaway&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Neponsit&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Forest Hills&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Queens Village&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;College Point&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Kew Gardens&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Woodhaven&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Breezy Point&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Jamaica&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;St. Albans&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Bay Terrace&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Hollis&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Ridgewood&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Edgemere&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Maspeth&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Corona&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Kew Gardens Hills&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Woodside&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Bayside&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Hollis Hills&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Rockaway Beach&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[attr:neighbourhood:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Briarwood&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Jamaica Estates&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Sunnyside&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Arverne&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Fresh Meadows&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Rego Park&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Bayswater&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Holliswood&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Rosedale&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Ditmars Steinway&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Laurelton&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Cambria Heights&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Jamaica Hills&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Whitestone&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Belle Harbor&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Howard Beach&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;South Ozone Park&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Flushing&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Ozone Park&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Astoria&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Glendale&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Richmond Hill&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Elmhurst&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Middle Village&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Bellerose&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Jackson Heights&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Springfield Gardens&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Douglaston&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Little Neck&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;East Elmhurst&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Long Island City&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Far Rockaway&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Neponsit&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Forest Hills&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Queens Village&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;College Point&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Kew Gardens&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Woodhaven&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Breezy Point&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Jamaica&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;St. Albans&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Bay Terrace&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Hollis&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Ridgewood&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Edgemere&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Maspeth&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Corona&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Kew Gardens Hills&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Woodside&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Bayside&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Hollis Hills&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Rockaway Beach&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <object-graph>
        <objects>
          <object caption='Airbnb_listing.csv' id='Airbnb_listing.csv_64E5AAB808954A5D9005B188EA12273A'>
            <properties context=''>
              <relation connection='textscan.10jiu9t0t2kb3c15jvqpe1k6oehp' name='Airbnb_listing.csv' table='[Airbnb_listing#csv]' type='table'>
                <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
                  <column datatype='real' name='id' ordinal='0' />
                  <column datatype='string' name='name' ordinal='1' />
                  <column datatype='integer' name='host_id' ordinal='2' />
                  <column datatype='string' name='host_name' ordinal='3' />
                  <column datatype='date' name='host_since' ordinal='4' />
                  <column datatype='string' name='neighbourhood' ordinal='5' />
                  <column datatype='string' name='neighbourhood_group' ordinal='6' />
                  <column datatype='real' name='latitude' ordinal='7' />
                  <column datatype='real' name='longitude' ordinal='8' />
                  <column datatype='string' name='room_type' ordinal='9' />
                  <column datatype='integer' name='accommodates' ordinal='10' />
                  <column datatype='string' name='bathrooms_text' ordinal='11' />
                  <column datatype='integer' name='bedrooms' ordinal='12' />
                  <column datatype='integer' name='beds' ordinal='13' />
                  <column datatype='real' name='price' ordinal='14' />
                  <column datatype='integer' name='number_of_reviews' ordinal='15' />
                  <column datatype='date' name='last_review' ordinal='16' />
                </columns>
              </relation>
            </properties>
          </object>
        </objects>
      </object-graph>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <worksheets>
    <worksheet name='Sheet 1'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontalignment='1' fontname='Tableau Bold'>Rental Count by Borough</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Airbnb_listing' name='federated.0f4ssrh1y2bh0s12kul5x14vekgt' />
          </datasources>
          <datasource-dependencies datasource='federated.0f4ssrh1y2bh0s12kul5x14vekgt'>
            <column caption='Airbnb_listing.csv' datatype='table' name='[__tableau_internal_object_id__].[Airbnb_listing.csv_64E5AAB808954A5D9005B188EA12273A]' role='measure' type='quantitative' />
            <column-instance column='[__tableau_internal_object_id__].[Airbnb_listing.csv_64E5AAB808954A5D9005B188EA12273A]' derivation='Count' name='[__tableau_internal_object_id__].[cnt:Airbnb_listing.csv_64E5AAB808954A5D9005B188EA12273A:qk]' pivot='key' type='quantitative' />
            <column caption='Neighbourhood Group' datatype='string' name='[neighbourhood_group]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;Bronx&quot;' value='Bronx (AVG: 121.0)' />
                <alias key='&quot;Brooklyn&quot;' value='Brooklyn (AVG: 160.9)' />
                <alias key='&quot;Manhattan&quot;' value='Manhattan (AVG: 301.2)' />
                <alias key='&quot;Queens&quot;' value='Queens (AVG: 135.7)' />
                <alias key='&quot;Staten Island&quot;' value='Staten Island (AVG: 159.8)' />
              </aliases>
            </column>
            <column-instance column='[neighbourhood_group]' derivation='None' name='[none:neighbourhood_group:nk]' pivot='key' type='nominal' />
            <column-instance column='[room_type]' derivation='None' name='[none:room_type:nk]' pivot='key' type='nominal' />
            <column caption='Room Type' datatype='string' name='[room_type]' role='dimension' type='nominal' />
          </datasource-dependencies>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[none:neighbourhood_group:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[__tableau_internal_object_id__].[cnt:Airbnb_listing.csv_64E5AAB808954A5D9005B188EA12273A:qk]' shelf='rows' />
          </shelf-sorts>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[__tableau_internal_object_id__].[cnt:Airbnb_listing.csv_64E5AAB808954A5D9005B188EA12273A:qk]' scope='cols' value='Count of Airbnb Listings' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[none:neighbourhood_group:nk]' value='220' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[none:room_type:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[none:neighbourhood_group:nk]</rows>
        <cols>[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[__tableau_internal_object_id__].[cnt:Airbnb_listing.csv_64E5AAB808954A5D9005B188EA12273A:qk]</cols>
      </table>
      <simple-id uuid='{E5E93D3D-F340-45D1-B5BD-9E2BDF3778A9}' />
    </worksheet>
    <worksheet name='Sheet 10'>
      <table>
        <view>
          <datasources />
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{5CE7AE80-B2CE-4D9C-92E1-0424E8E943CF}' />
    </worksheet>
    <worksheet name='Sheet 2'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontname='Tableau Bold'>Affordability of Rentals by Borough and Neighborhood</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Airbnb_listing' name='federated.0f4ssrh1y2bh0s12kul5x14vekgt' />
          </datasources>
          <datasource-dependencies datasource='federated.0f4ssrh1y2bh0s12kul5x14vekgt'>
            <column-instance column='[price]' derivation='Avg' name='[avg:price:qk]' pivot='key' type='quantitative' />
            <column caption='Neighbourhood' datatype='string' name='[neighbourhood]' role='dimension' type='nominal' />
            <column caption='Neighbourhood Group' datatype='string' name='[neighbourhood_group]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;Bronx&quot;' value='Bronx (AVG: 121.0)' />
                <alias key='&quot;Brooklyn&quot;' value='Brooklyn (AVG: 160.9)' />
                <alias key='&quot;Manhattan&quot;' value='Manhattan (AVG: 301.2)' />
                <alias key='&quot;Queens&quot;' value='Queens (AVG: 135.7)' />
                <alias key='&quot;Staten Island&quot;' value='Staten Island (AVG: 159.8)' />
              </aliases>
            </column>
            <column-instance column='[neighbourhood]' derivation='None' name='[none:neighbourhood:nk]' pivot='key' type='nominal' />
            <column-instance column='[neighbourhood_group]' derivation='None' name='[none:neighbourhood_group:nk]' pivot='key' type='nominal' />
            <column caption='Price' datatype='real' name='[price]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[none:neighbourhood:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:neighbourhood:nk]' member='&quot;Bellerose&quot;' />
              <groupfilter function='member' level='[none:neighbourhood:nk]' member='&quot;Borough Park&quot;' />
              <groupfilter function='member' level='[none:neighbourhood:nk]' member='&quot;Brownsville&quot;' />
              <groupfilter function='member' level='[none:neighbourhood:nk]' member='&quot;Carroll Gardens&quot;' />
              <groupfilter function='member' level='[none:neighbourhood:nk]' member='&quot;Country Club&quot;' />
              <groupfilter function='member' level='[none:neighbourhood:nk]' member='&quot;Douglaston&quot;' />
              <groupfilter function='member' level='[none:neighbourhood:nk]' member='&quot;Downtown Brooklyn&quot;' />
              <groupfilter function='member' level='[none:neighbourhood:nk]' member='&quot;East Morrisania&quot;' />
              <groupfilter function='member' level='[none:neighbourhood:nk]' member='&quot;Flushing&quot;' />
              <groupfilter function='member' level='[none:neighbourhood:nk]' member='&quot;Fort Wadsworth&quot;' />
              <groupfilter function='member' level='[none:neighbourhood:nk]' member='&quot;Hollis Hills&quot;' />
              <groupfilter function='member' level='[none:neighbourhood:nk]' member='&quot;Inwood&quot;' />
              <groupfilter function='member' level='[none:neighbourhood:nk]' member='&quot;Kingsbridge&quot;' />
              <groupfilter function='member' level='[none:neighbourhood:nk]' member='&quot;Long Island City&quot;' />
              <groupfilter function='member' level='[none:neighbourhood:nk]' member='&quot;Morningside Heights&quot;' />
              <groupfilter function='member' level='[none:neighbourhood:nk]' member='&quot;Mott Haven&quot;' />
              <groupfilter function='member' level='[none:neighbourhood:nk]' member='&quot;Navy Yard&quot;' />
              <groupfilter function='member' level='[none:neighbourhood:nk]' member='&quot;New Dorp&quot;' />
              <groupfilter function='member' level='[none:neighbourhood:nk]' member='&quot;Nolita&quot;' />
              <groupfilter function='member' level='[none:neighbourhood:nk]' member='&quot;Oakwood&quot;' />
              <groupfilter function='member' level='[none:neighbourhood:nk]' member='&quot;Prince&apos;s Bay&quot;' />
              <groupfilter function='member' level='[none:neighbourhood:nk]' member='&quot;Riverdale&quot;' />
              <groupfilter function='member' level='[none:neighbourhood:nk]' member='&quot;SoHo&quot;' />
              <groupfilter function='member' level='[none:neighbourhood:nk]' member='&quot;Theater District&quot;' />
              <groupfilter function='member' level='[none:neighbourhood:nk]' member='&quot;Willowbrook&quot;' />
            </groupfilter>
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[none:neighbourhood:nk]' direction='ASC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[avg:price:qk]' shelf='rows' />
          </shelf-sorts>
          <slices>
            <column>[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[none:neighbourhood:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='header'>
            <format attr='width' field='[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[none:neighbourhood_group:nk]' value='120' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-orientation' field='[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[none:neighbourhood_group:nk]' value='0' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='size-bar' field='[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[avg:price:qk]' field-type='quantitative' max-size='1' min-size='0.005' type='centersize' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[avg:price:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.0f4ssrh1y2bh0s12kul5x14vekgt].[none:neighbourhood_group:nk] / [federated.0f4ssrh1y2bh0s12kul5x14vekgt].[none:neighbourhood:nk])</rows>
        <cols>[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[avg:price:qk]</cols>
      </table>
      <simple-id uuid='{1DBE0B4F-16E8-4896-BFF1-96C30A18B5AF}' />
    </worksheet>
    <worksheet name='Sheet 3'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontname='Tableau Bold'>Count of New Hosts by Year</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Airbnb_listing' name='federated.0f4ssrh1y2bh0s12kul5x14vekgt' />
          </datasources>
          <datasource-dependencies datasource='federated.0f4ssrh1y2bh0s12kul5x14vekgt'>
            <column-instance column='[host_id]' derivation='Count' name='[cnt:host_id:qk]' pivot='key' type='quantitative' />
            <column caption='Host Id' datatype='integer' name='[host_id]' role='dimension' type='ordinal' />
            <column caption='Host Since' datatype='date' name='[host_since]' role='dimension' type='ordinal' />
            <column-instance column='[host_since]' derivation='Year' name='[yr:host_since:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[cnt:host_id:qk]</rows>
        <cols>[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[yr:host_since:ok]</cols>
      </table>
      <simple-id uuid='{37043AE4-88B7-44E0-BDDE-C033D1D25BB4}' />
    </worksheet>
    <worksheet name='Sheet 4'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontname='Tableau Bold'>Most Profitable Host</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Airbnb_listing' name='federated.0f4ssrh1y2bh0s12kul5x14vekgt' />
          </datasources>
          <datasource-dependencies datasource='federated.0f4ssrh1y2bh0s12kul5x14vekgt'>
            <column caption='Host Name' datatype='string' name='[host_name]' role='dimension' type='nominal' />
            <column-instance column='[host_name]' derivation='None' name='[none:host_name:nk]' pivot='key' type='nominal' />
            <column caption='Price' datatype='real' name='[price]' role='measure' type='quantitative' />
            <column-instance column='[price]' derivation='Sum' name='[sum:price:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[none:host_name:nk]'>
            <groupfilter count='10' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='SUM([price])' function='order' user:ui-marker='order'>
                <groupfilter function='level-members' level='[none:host_name:nk]' user:ui-manual-selection='true' user:ui-manual-selection-all-when-empty='true' user:ui-manual-selection-is-empty='true' user:ui-marker='enumerate' />
              </groupfilter>
            </groupfilter>
          </filter>
          <computed-sort column='[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[none:host_name:nk]' direction='DESC' using='[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[sum:price:qk]' />
          <slices>
            <column>[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[none:host_name:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='header'>
            <format attr='width' field='[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[none:host_name:nk]' value='204' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[sum:price:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[none:host_name:nk]</rows>
        <cols />
      </table>
      <simple-id uuid='{55410391-BD2F-47C9-B9CE-78AE194F7A5A}' />
    </worksheet>
    <worksheet name='Sheet 5'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontalignment='1' fontname='Tableau Bold'>Prices of 2 Bedroom Homes in Rockaway Beach ($)</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Airbnb_listing' name='federated.0f4ssrh1y2bh0s12kul5x14vekgt' />
          </datasources>
          <datasource-dependencies datasource='federated.0f4ssrh1y2bh0s12kul5x14vekgt'>
            <column-instance column='[price]' derivation='Avg' name='[avg:price:qk]' pivot='key' type='quantitative' />
            <column caption='Bedrooms' datatype='integer' name='[bedrooms]' role='measure' type='quantitative' />
            <column caption='Id' datatype='real' name='[id]' role='dimension' type='ordinal' />
            <column caption='Neighbourhood' datatype='string' name='[neighbourhood]' role='dimension' type='nominal' />
            <column-instance column='[bedrooms]' derivation='None' name='[none:bedrooms:qk]' pivot='key' type='quantitative' />
            <column-instance column='[id]' derivation='None' name='[none:id:ok]' pivot='key' type='ordinal' />
            <column-instance column='[neighbourhood]' derivation='None' name='[none:neighbourhood:nk]' pivot='key' type='nominal' />
            <column caption='Price' datatype='real' name='[price]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <filter class='quantitative' column='[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[none:bedrooms:qk]' included-values='in-range'>
            <min>2</min>
            <max>2</max>
          </filter>
          <filter class='categorical' column='[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[none:neighbourhood:nk]'>
            <groupfilter function='member' level='[none:neighbourhood:nk]' member='&quot;Rockaway Beach&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[none:neighbourhood:nk]</column>
            <column>[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[none:bedrooms:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='height' field='[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[avg:price:qk]' value='31' />
          </style-rule>
          <style-rule element='cell'>
            <format attr='height' value='52' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <encodings>
              <lod column='[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[none:id:ok]' />
            </encodings>
            <reference-line axis-column='[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[avg:price:qk]' boxplot-mark-exclusion='false' boxplot-whisker-type='standard' enable-instant-analytics='true' formula='average' id='refline0' label-type='automatic' probability='95' scope='per-cell' symmetric='false' value-column='[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[avg:price:qk]' z-order='1' />
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.25' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols>[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[avg:price:qk]</cols>
      </table>
      <simple-id uuid='{A31E9111-FC52-4884-B348-28A2759F7A48}' />
    </worksheet>
    <worksheet name='Sheet 6A'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontalignment='1' fontname='Tableau Bold'>Prices of 3 Bedroom Homes in Rockaway Beach by Bathroom Count ($)</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Airbnb_listing' name='federated.0f4ssrh1y2bh0s12kul5x14vekgt' />
          </datasources>
          <datasource-dependencies datasource='federated.0f4ssrh1y2bh0s12kul5x14vekgt'>
            <column-instance column='[price]' derivation='Avg' name='[avg:price:qk]' pivot='key' type='quantitative' />
            <column caption='Bathrooms Text' datatype='string' name='[bathrooms_text]' role='dimension' type='nominal' />
            <column caption='Bedrooms' datatype='integer' name='[bedrooms]' role='measure' type='quantitative' />
            <column caption='Id' datatype='real' name='[id]' role='dimension' type='ordinal' />
            <column caption='Neighbourhood' datatype='string' name='[neighbourhood]' role='dimension' type='nominal' />
            <column-instance column='[bathrooms_text]' derivation='None' name='[none:bathrooms_text:nk]' pivot='key' type='nominal' />
            <column-instance column='[bedrooms]' derivation='None' name='[none:bedrooms:qk]' pivot='key' type='quantitative' />
            <column-instance column='[id]' derivation='None' name='[none:id:ok]' pivot='key' type='ordinal' />
            <column-instance column='[neighbourhood]' derivation='None' name='[none:neighbourhood:nk]' pivot='key' type='nominal' />
            <column caption='Price' datatype='real' name='[price]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <filter class='quantitative' column='[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[none:bedrooms:qk]' included-values='in-range'>
            <min>3</min>
            <max>3</max>
          </filter>
          <filter class='categorical' column='[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[none:neighbourhood:nk]'>
            <groupfilter function='member' level='[none:neighbourhood:nk]' member='&quot;Rockaway Beach&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[none:neighbourhood:nk]</column>
            <column>[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[none:bedrooms:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='height' field='[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[avg:price:qk]' value='31' />
          </style-rule>
          <style-rule element='cell'>
            <format attr='height' value='52' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <encodings>
              <lod column='[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[none:id:ok]' />
            </encodings>
            <reference-line axis-column='[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[avg:price:qk]' boxplot-mark-exclusion='false' boxplot-whisker-type='standard' enable-instant-analytics='true' formula='average' id='refline0' label-type='automatic' probability='95' scope='per-cell' symmetric='false' value-column='[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[avg:price:qk]' z-order='1' />
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.25' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[none:bathrooms_text:nk]</rows>
        <cols>[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[avg:price:qk]</cols>
      </table>
      <simple-id uuid='{CAD13C6E-FC69-4E01-A69A-F937DAB3AC2E}' />
    </worksheet>
    <worksheet name='Sheet 6B'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontalignment='1' fontname='Tableau Bold'>Prices of 3 Bedroom Homes in Rockaway Beach ($)</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Airbnb_listing' name='federated.0f4ssrh1y2bh0s12kul5x14vekgt' />
          </datasources>
          <datasource-dependencies datasource='federated.0f4ssrh1y2bh0s12kul5x14vekgt'>
            <column-instance column='[price]' derivation='Avg' name='[avg:price:qk]' pivot='key' type='quantitative' />
            <column caption='Bedrooms' datatype='integer' name='[bedrooms]' role='measure' type='quantitative' />
            <column caption='Id' datatype='real' name='[id]' role='dimension' type='ordinal' />
            <column caption='Neighbourhood' datatype='string' name='[neighbourhood]' role='dimension' type='nominal' />
            <column-instance column='[bedrooms]' derivation='None' name='[none:bedrooms:qk]' pivot='key' type='quantitative' />
            <column-instance column='[id]' derivation='None' name='[none:id:ok]' pivot='key' type='ordinal' />
            <column-instance column='[neighbourhood]' derivation='None' name='[none:neighbourhood:nk]' pivot='key' type='nominal' />
            <column caption='Price' datatype='real' name='[price]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <filter class='quantitative' column='[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[none:bedrooms:qk]' included-values='in-range'>
            <min>3</min>
            <max>3</max>
          </filter>
          <filter class='categorical' column='[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[none:neighbourhood:nk]'>
            <groupfilter function='member' level='[none:neighbourhood:nk]' member='&quot;Rockaway Beach&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[none:neighbourhood:nk]</column>
            <column>[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[none:bedrooms:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='height' field='[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[avg:price:qk]' value='31' />
            <encoding attr='space' class='0' field='[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[avg:price:qk]' field-type='quantitative' max='421.40323824209713' min='-38.0' range-type='fixed' scope='cols' type='space' />
          </style-rule>
          <style-rule element='cell'>
            <format attr='height' value='52' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <encodings>
              <lod column='[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[none:id:ok]' />
            </encodings>
            <reference-line axis-column='[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[avg:price:qk]' boxplot-mark-exclusion='false' boxplot-whisker-type='standard' enable-instant-analytics='true' formula='average' id='refline0' label-type='automatic' probability='95' scope='per-cell' symmetric='false' value-column='[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[avg:price:qk]' z-order='1' />
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.25' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols>[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[avg:price:qk]</cols>
      </table>
      <simple-id uuid='{61303D70-3C9B-40DB-A38B-7805FB1D859F}' />
    </worksheet>
    <worksheet name='Sheet 7A'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontalignment='1' fontname='Tableau Bold'>Map of Rockaway Beach and Its Neighbors</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Airbnb_listing' name='federated.0f4ssrh1y2bh0s12kul5x14vekgt' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.0f4ssrh1y2bh0s12kul5x14vekgt'>
            <column-instance column='[neighbourhood]' derivation='Attribute' name='[attr:neighbourhood:nk]' pivot='key' type='nominal' />
            <column aggregation='Avg' caption='Latitude' datatype='real' name='[latitude]' role='measure' semantic-role='[Geographical].[Latitude]' type='quantitative' />
            <column aggregation='Avg' caption='Longitude' datatype='real' name='[longitude]' role='measure' semantic-role='[Geographical].[Longitude]' type='quantitative' />
            <column caption='Neighbourhood' datatype='string' name='[neighbourhood]' role='dimension' type='nominal' />
            <column caption='Neighbourhood Group' datatype='string' name='[neighbourhood_group]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;Bronx&quot;' value='Bronx (AVG: 121.0)' />
                <alias key='&quot;Brooklyn&quot;' value='Brooklyn (AVG: 160.9)' />
                <alias key='&quot;Manhattan&quot;' value='Manhattan (AVG: 301.2)' />
                <alias key='&quot;Queens&quot;' value='Queens (AVG: 135.7)' />
                <alias key='&quot;Staten Island&quot;' value='Staten Island (AVG: 159.8)' />
              </aliases>
            </column>
            <column-instance column='[latitude]' derivation='None' name='[none:latitude:qk]' pivot='key' type='quantitative' />
            <column-instance column='[longitude]' derivation='None' name='[none:longitude:qk]' pivot='key' type='quantitative' />
            <column-instance column='[neighbourhood]' derivation='None' name='[none:neighbourhood:nk]' pivot='key' type='nominal' />
            <column-instance column='[neighbourhood_group]' derivation='None' name='[none:neighbourhood_group:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[Inclusions (Latitude,Longitude,Neighbourhood)]'>
            <groupfilter function='reorder-dimensionality' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='union'>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:neighbourhood:nk]' member='&quot;Arverne&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.586579999999998' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.798450000000003' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.586590000000001' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.798689999999993' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.58717' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.794529999999995' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:latitude:qk]' member='40.587240000000001' />
                        <groupfilter function='member' level='[none:latitude:qk]' member='40.594349999999999' />
                      </groupfilter>
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.79401' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.587318760000002' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.800458660000004' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:latitude:qk]' member='40.587530000000001' />
                        <groupfilter function='member' level='[none:latitude:qk]' member='40.59263' />
                      </groupfilter>
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.796400000000006' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.587829999999997' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.796030000000002' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.587859999999999' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.793732000000006' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.588120000000004' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.795447999999993' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.58813' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.796530000000004' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.588430000000002' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.791749999999993' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.588549999999998' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.794070000000005' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.588659999999997' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:longitude:qk]' member='-73.798590000000004' />
                        <groupfilter function='member' level='[none:longitude:qk]' member='-73.793670000000006' />
                        <groupfilter function='member' level='[none:longitude:qk]' member='-73.793620000000004' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.588929999999998' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.800640000000001' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.588940000000001' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.793629999999993' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.588999999999999' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.800150000000002' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.589100000000002' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.796970000000002' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:latitude:qk]' member='40.589210000000001' />
                        <groupfilter function='member' level='[none:latitude:qk]' member='40.595089999999999' />
                      </groupfilter>
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.795079999999999' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.589320000000001' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.797749999999994' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.589350000000003' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.792649999999995' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.589469999999999' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.79298' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.589559999999999' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.80077' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.589570000000002' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.790930000000003' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.590040000000002' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.794700000000006' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.59008' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.792760000000001' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.590179999999997' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.793509999999998' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.590470000000003' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.788799999999995' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.590499999999999' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.7911' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.590559999999996' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.792839999999998' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.590670000000003' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.794790000000006' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.59075' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.797139999999999' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.590769999999999' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.790469999999999' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.590780000000002' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.788849999999996' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.590829999999997' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.788979999999995' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.590879999999999' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.786670000000001' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.591099999999997' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.798050000000003' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.591160000000002' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.79759' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.591250000000002' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.796220000000005' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:latitude:qk]' member='40.591450000000002' />
                        <groupfilter function='member' level='[none:latitude:qk]' member='40.595269999999999' />
                      </groupfilter>
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.793300000000002' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.591520000000003' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.787520000000001' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.591540000000002' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:longitude:qk]' member='-73.797269999999997' />
                        <groupfilter function='member' level='[none:longitude:qk]' member='-73.791160000000005' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.591630000000002' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.793310000000005' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.591675000000002' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.790756000000002' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.592060000000004' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.792580000000001' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.592089999999999' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.790450000000007' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.592109999999998' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:longitude:qk]' member='-73.794049999999999' />
                        <groupfilter function='member' level='[none:longitude:qk]' member='-73.792249999999996' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.592210000000001' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.799449999999993' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.59252' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.788529999999994' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:latitude:qk]' member='40.592579999999998' />
                        <groupfilter function='member' level='[none:latitude:qk]' member='40.599220000000003' />
                      </groupfilter>
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.799199999999999' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.592619999999997' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:longitude:qk]' member='-73.790109999999999' />
                        <groupfilter function='member' level='[none:longitude:qk]' member='-73.788939999999997' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.592640000000003' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.788839999999993' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.592799999999997' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:longitude:qk]' member='-73.797809999999998' />
                        <groupfilter function='member' level='[none:longitude:qk]' member='-73.789770000000004' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.592820000000003' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.796700000000001' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.592930000000003' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.798509999999993' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.59301' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.79325' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:latitude:qk]' member='40.593330000000002' />
                        <groupfilter function='member' level='[none:latitude:qk]' member='40.594110000000001' />
                      </groupfilter>
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.796469999999999' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.593490000000003' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.788290000000003' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.593670000000003' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.788700000000006' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.593690000000002' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.793289999999999' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.593699999999998' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.788910000000001' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.593859999999999' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.788759999999996' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.593870000000003' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.788579999999996' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.594140000000003' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.793719999999993' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.594259999999998' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.798969999999997' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.594299999999997' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.794920000000005' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.594340000000003' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.793589999999995' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.594439999999999' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.801590000000004' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.594459999999998' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.800889999999995' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.594619999999999' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.791160000000005' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.594700000000003' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.799729999999997' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.594999999999999' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.793080000000003' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.595039999999997' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.798569999999998' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.595081450000002' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.798662030000003' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.595199999999998' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.796800000000005' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.595219999999998' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.794690000000003' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.595439999999996' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.800709999999995' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.595660000000002' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.792310000000001' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.595883479999998' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.798241899999994' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.596069999999997' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.795569999999998' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.596110000000003' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.788679999999999' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.596119999999999' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.799959999999999' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.596139999999998' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.794200000000004' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.596150000000002' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.797889999999995' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.596396570000003' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.798982019999997' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.596409999999999' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.802000000000007' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.596440000000001' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.794579999999996' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.596539999999997' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.799130000000005' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.596710000000002' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.794899999999998' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.597020989999997' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.79650608' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.597070000000002' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.802729999999997' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.597090000000001' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.799260000000004' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.597389999999997' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.79898' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.597479999999997' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.799859999999995' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.597880000000004' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.799660000000003' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.597909999999999' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.7988' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.598039999999997' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.800280000000001' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.598082529999999' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.791934889999993' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.598210000000002' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.800030000000007' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.598219999999998' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.796999999999997' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.598227999999999' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.799094999999994' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.5983558' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.800286999999997' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.598379999999999' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.796729999999997' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.598550000000003' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.794179999999997' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.599260000000001' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.79795' />
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:neighbourhood:nk]' member='&quot;Bayswater&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.598680000000002' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.763440000000003' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.598779999999998' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.767529999999994' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.600230000000003' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.768780000000007' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.60107' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.765150000000006' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.601390000000002' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.760360000000006' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.603090000000002' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.75891' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.603760000000001' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.759349999999998' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.604469999999999' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.769959999999998' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.605040000000002' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.757329999999996' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.605633300000001' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.758794800000004' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.606310000000001' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.759240000000005' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.606969999999997' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.759079999999997' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.607120000000002' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.758160000000004' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.60736' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.756060000000005' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.607370000000003' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.76558' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.60765' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.76446' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.607869999999998' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.756349999999998' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.608460000000001' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.754509999999996' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.608969999999999' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.757469999999998' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.609139999999996' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.76831' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.609949999999998' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.768979999999999' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.61092' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.768050000000002' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.610950000000003' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.767989999999998' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.61121' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.768039999999999' />
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:neighbourhood:nk]' member='&quot;Belle Harbor&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.574680000000001' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.856030000000004' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.576920000000001' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.845240000000004' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.577120000000001' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.847219999999993' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.578029999999998' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.845399999999998' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.578270000000003' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.845550000000003' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.579509999999999' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.846890000000002' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.579535999999997' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.849853999999993' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.581150000000001' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.850750000000005' />
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:neighbourhood:nk]' member='&quot;Breezy Point&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.566490000000002' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.868939999999995' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.567480000000003' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.871110000000002' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.568069999999999' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.869460000000004' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.568219999999997' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.86909' />
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:neighbourhood:nk]' member='&quot;Edgemere&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.59346' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.775760000000005' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.594169999999998' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.771109999999993' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.594200000000001' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.772760000000005' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.594499999999996' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.775210000000001' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.594569999999997' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.771029999999996' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.594650000000001' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.774969999999996' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.594929' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.770698999999993' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.595080000000003' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.778199999999998' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.595219999999998' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.771680000000003' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.595660000000002' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.769850000000005' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.595999999999997' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.771140000000003' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.596179999999997' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.768969999999996' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.596429999999998' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.769319999999993' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.596620000000001' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.76961' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.596868100000002' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.777766200000002' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.597182549999999' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.777796370000004' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.59787' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.77807' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.598140000000001' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.778049999999993' />
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:neighbourhood:nk]' member='&quot;Far Rockaway&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.592529999999996' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.758719999999997' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.593398319999999' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.757657379999998' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.593806999999998' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.757896000000002' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.59507' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.754080000000002' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.595109999999998' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.754239999999996' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.595140000000001' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.763000000000005' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.595199999999998' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.763559999999998' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.595289999999999' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.763549999999995' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.596069999999997' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.738759999999999' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.596139999999998' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.760509999999996' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.596209999999999' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.754130000000004' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.596299999999999' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.755930000000006' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.596429999999998' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.762439999999998' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.596499999999999' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.74879' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.596589999999999' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.749979999999994' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.597270000000002' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.741780000000006' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.597299999999997' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.747119999999995' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.597329999999999' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.748249999999999' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.597630000000002' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.763469999999998' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:latitude:qk]' member='40.597938419999998' />
                        <groupfilter function='member' level='[none:latitude:qk]' member='40.5979873' />
                      </groupfilter>
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.756180099999995' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.598329999999997' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.742019999999997' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.59836' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.760840000000002' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.598370000000003' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.759240000000005' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.598489999999998' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.761219999999994' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.598529999999997' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.746799999999993' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.598820000000003' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:longitude:qk]' member='-73.759439999999998' />
                        <groupfilter function='member' level='[none:longitude:qk]' member='-73.741709999999998' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.598939999999999' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.756569999999996' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.599040000000002' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.748069999999998' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.599049999999998' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.754360000000005' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.599333399999999' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.761702099999994' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.599420000000002' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.756889999999999' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.599850000000004' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.761179999999996' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.600110000000001' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.751000000000005' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.600160000000002' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.752880000000005' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.600589999999997' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.759190000000004' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.601030000000002' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.752440000000007' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.601179999999999' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.755300000000005' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.602080000000001' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.756079999999997' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.602339999999998' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.757559999999998' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.602420000000002' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.752899999999997' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:latitude:qk]' member='40.603740000000002' />
                        <groupfilter function='member' level='[none:latitude:qk]' member='40.605519999999999' />
                      </groupfilter>
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.751019999999997' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.603999999999999' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.751480000000001' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.605170000000001' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.749700000000004' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.605269999999997' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.749619999999993' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.605629999999998' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.749709999999993' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.605690000000003' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.751320000000007' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.605899999999998' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.751890000000003' />
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:neighbourhood:nk]' member='&quot;Neponsit&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.569479999999999' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.859409999999997' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.570680000000003' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.861260000000001' />
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:neighbourhood:nk]' member='&quot;Rockaway Beach&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.58323' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.814570000000003' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:latitude:qk]' member='40.583399999999997' />
                        <groupfilter function='member' level='[none:latitude:qk]' member='40.586179999999999' />
                      </groupfilter>
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.816739999999996' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.584020000000002' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.814030000000002' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.584429999999998' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.812510000000003' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.584449999999997' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.813820000000007' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:latitude:qk]' member='40.584569999999999' />
                        <groupfilter function='member' level='[none:latitude:qk]' member='40.590170000000001' />
                      </groupfilter>
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.814189999999996' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.584690000000002' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.813329999999993' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.584739999999996' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.813190000000006' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.58493' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.817359999999994' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.584999000000003' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.813086999999996' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.585000000000001' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.813599999999994' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.585030000000003' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.816699999999997' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.585149999999999' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:longitude:qk]' member='-73.817610000000002' />
                        <groupfilter function='member' level='[none:longitude:qk]' member='-73.815179999999998' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.58522' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.815539999999999' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.585250000000002' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.817149999999998' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.585419999999999' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.817909999999998' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.585509999999999' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.817719999999994' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.58578' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.817490000000006' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.585842130000003' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.813423159999999' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.585920000000002' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.818269999999998' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.586030000000001' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.814499999999995' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.586100000000002' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.81523' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.58614' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.816400000000002' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:latitude:qk]' member='40.586829999999999' />
                        <groupfilter function='member' level='[none:latitude:qk]' member='40.588659999999997' />
                      </groupfilter>
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.815529999999995' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:latitude:qk]' member='40.586840000000002' />
                        <groupfilter function='member' level='[none:latitude:qk]' member='40.587260000000001' />
                      </groupfilter>
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.815880000000007' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.586860000000001' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:longitude:qk]' member='-73.817430000000002' />
                        <groupfilter function='member' level='[none:longitude:qk]' member='-73.815420000000003' />
                      </groupfilter>
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.58737' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.816140000000004' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.587429999999998' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.815129999999996' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.587519999999998' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.815489999999997' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.58755' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.812439999999995' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.587572700000003' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.814376999999993' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.587649999999996' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.811760000000007' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.587760000000003' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.813590000000005' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.587896909999998' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.815286869999994' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.588050000000003' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.815029999999993' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.588090000000001' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.812550000000002' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.588099999999997' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.814269999999993' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.588120000000004' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.813829999999996' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.588140000000003' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.81644' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:latitude:qk]' member='40.588279999999997' />
                        <groupfilter function='member' level='[none:latitude:qk]' member='40.589730000000003' />
                      </groupfilter>
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.813569999999999' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.588560000000001' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.814980000000006' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.588610000000003' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.814890000000005' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.588740000000001' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.813220000000001' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.588940000000001' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.812039999999996' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.589219999999997' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.814179999999993' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.589399999999998' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.814830000000001' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[none:latitude:qk]' member='40.589530000000003' />
                        <groupfilter function='member' level='[none:latitude:qk]' member='40.590069999999997' />
                      </groupfilter>
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.814070000000001' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.589590000000001' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.813389999999998' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.589619999999996' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.801140000000004' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.589689999999997' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.813850000000002' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.589700000000001' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.811639999999997' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.58972' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.811139999999995' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.589790000000001' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.811099999999996' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.58981' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.811949999999996' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.589849999999998' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.80592' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.589919999999999' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.811369999999997' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.590090000000004' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.813230000000004' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.590269999999997' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.810320000000004' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.590350000000001' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.802170000000004' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.590510000000002' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.812100000000001' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.590539999999997' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.812110000000004' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:latitude:qk]' member='40.591349999999998' />
                      <groupfilter function='member' level='[none:longitude:qk]' member='-73.811480000000003' />
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
              </groupfilter>
              <order>
                <hierarchy name='[none:latitude:qk]' />
                <hierarchy name='[none:longitude:qk]' />
                <hierarchy name='[none:neighbourhood:nk]' />
              </order>
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[none:neighbourhood:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:neighbourhood:nk]' member='&quot;Arverne&quot;' />
              <groupfilter function='member' level='[none:neighbourhood:nk]' member='&quot;Bayswater&quot;' />
              <groupfilter function='member' level='[none:neighbourhood:nk]' member='&quot;Belle Harbor&quot;' />
              <groupfilter function='member' level='[none:neighbourhood:nk]' member='&quot;Breezy Point&quot;' />
              <groupfilter function='member' level='[none:neighbourhood:nk]' member='&quot;Edgemere&quot;' />
              <groupfilter function='member' level='[none:neighbourhood:nk]' member='&quot;Far Rockaway&quot;' />
              <groupfilter function='member' level='[none:neighbourhood:nk]' member='&quot;Neponsit&quot;' />
              <groupfilter function='member' level='[none:neighbourhood:nk]' member='&quot;Rockaway Beach&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[none:neighbourhood_group:nk]'>
            <groupfilter function='member' level='[none:neighbourhood_group:nk]' member='&quot;Queens&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[none:neighbourhood_group:nk]</column>
            <column>[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[Inclusions (Latitude,Longitude,Neighbourhood)]</column>
            <column>[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[none:neighbourhood:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='height' field='[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[none:neighbourhood:nk]' value='179' />
            <encoding attr='space' class='0' field='[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[none:longitude:qk]' field-type='quantitative' max='-8205021.9484687001' min='-8226648.413147347' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[none:latitude:qk]' field-type='quantitative' max='4955559.6963332361' min='4947507.997269162' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
            <format attr='height' field='[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[attr:neighbourhood:nk]' value='179' />
          </style-rule>
          <style-rule element='cell'>
            <format attr='width' field='[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[none:neighbourhood:nk]' value='23' />
            <format attr='width' field='[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[attr:neighbourhood:nk]' value='23' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-orientation' field='[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[none:neighbourhood:nk]' value='-90' />
            <format attr='text-orientation' field='[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[attr:neighbourhood:nk]' value='-90' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane id='6' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[attr:neighbourhood:nk]' />
            </encodings>
            <trendline enable-confidence-bands='false' enable-instant-analytics='true' enabled='true' exclude-color='false' exclude-intercept='false' fit='linear' />
            <style>
              <style-rule element='cell'>
                <format attr='wrap' value='auto' />
                <format attr='text-align' value='auto' />
                <format attr='vertical-align' value='auto' />
              </style-rule>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[none:latitude:qk]</rows>
        <cols>[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[none:longitude:qk]</cols>
      </table>
      <simple-id uuid='{AD8CD10F-2430-429E-9E61-3C07848A76FA}' />
    </worksheet>
    <worksheet name='Sheet 7B'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontalignment='1' fontname='Tableau Bold'>Average Price of 2 Bedroom BNBs by Neighborhood</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Airbnb_listing' name='federated.0f4ssrh1y2bh0s12kul5x14vekgt' />
          </datasources>
          <datasource-dependencies datasource='federated.0f4ssrh1y2bh0s12kul5x14vekgt'>
            <column-instance column='[price]' derivation='Avg' name='[avg:price:qk]' pivot='key' type='quantitative' />
            <column caption='Bedrooms' datatype='integer' name='[bedrooms]' role='measure' type='quantitative' />
            <column caption='Neighbourhood' datatype='string' name='[neighbourhood]' role='dimension' type='nominal' />
            <column-instance column='[bedrooms]' derivation='None' name='[none:bedrooms:qk]' pivot='key' type='quantitative' />
            <column-instance column='[neighbourhood]' derivation='None' name='[none:neighbourhood:nk]' pivot='key' type='nominal' />
            <column caption='Price' datatype='real' name='[price]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <filter class='quantitative' column='[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[none:bedrooms:qk]' included-values='in-range'>
            <min>2</min>
            <max>2</max>
          </filter>
          <filter class='categorical' column='[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[none:neighbourhood:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:neighbourhood:nk]' member='&quot;Arverne&quot;' />
              <groupfilter function='member' level='[none:neighbourhood:nk]' member='&quot;Bayswater&quot;' />
              <groupfilter function='member' level='[none:neighbourhood:nk]' member='&quot;Belle Harbor&quot;' />
              <groupfilter function='member' level='[none:neighbourhood:nk]' member='&quot;Breezy Point&quot;' />
              <groupfilter function='member' level='[none:neighbourhood:nk]' member='&quot;Edgemere&quot;' />
              <groupfilter function='member' level='[none:neighbourhood:nk]' member='&quot;Far Rockaway&quot;' />
              <groupfilter function='member' level='[none:neighbourhood:nk]' member='&quot;Neponsit&quot;' />
              <groupfilter function='member' level='[none:neighbourhood:nk]' member='&quot;Rockaway Beach&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[none:neighbourhood:nk]</column>
            <column>[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[none:bedrooms:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[none:neighbourhood:nk]' value='133' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <style>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[avg:price:qk]</rows>
        <cols>[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[none:neighbourhood:nk]</cols>
      </table>
      <simple-id uuid='{08A9034D-B922-40E7-B9B4-E491655B712D}' />
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard enable-sort-zone-taborder='true' name='Dashboard 1'>
      <style />
      <size maxheight='500' maxwidth='1000' minheight='500' minwidth='1000' sizing-mode='fixed' />
      <zones>
        <zone h='100000' id='4' type-v2='layout-basic' w='100000' x='0' y='0'>
          <zone h='65000' id='3' name='Sheet 6A' w='98400' x='800' y='1600'>
            <zone-style>
              <format attr='border-color' value='#000000' />
              <format attr='border-style' value='none' />
              <format attr='border-width' value='0' />
              <format attr='margin' value='4' />
            </zone-style>
          </zone>
          <zone h='31800' id='5' name='Sheet 6B' w='98400' x='800' y='66600'>
            <zone-style>
              <format attr='border-color' value='#000000' />
              <format attr='border-style' value='none' />
              <format attr='border-width' value='0' />
              <format attr='margin' value='4' />
            </zone-style>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
      </zones>
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <size maxheight='700' minheight='700' sizing-mode='vscroll' />
          <zones>
            <zone h='100000' id='7' type-v2='layout-basic' w='100000' x='0' y='0'>
              <zone h='96800' id='6' param='vert' type-v2='layout-flow' w='98400' x='800' y='1600'>
                <zone fixed-size='280' h='65000' id='3' is-fixed='true' name='Sheet 6A' w='98400' x='800' y='1600'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='151' h='31800' id='5' is-fixed='true' name='Sheet 6B' w='98400' x='800' y='66600'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
              </zone>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='8' />
              </zone-style>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{6ABB355F-BF15-48AA-87D4-A080E3EA2B45}' />
    </dashboard>
    <dashboard enable-sort-zone-taborder='true' name='Dashboard 2'>
      <style />
      <size maxheight='800' maxwidth='1200' minheight='800' minwidth='1200' sizing-mode='fixed' />
      <zones>
        <zone h='100000' id='4' type-v2='layout-basic' w='100000' x='0' y='0'>
          <zone h='98000' id='7' param='horz' type-v2='layout-flow' w='98666' x='667' y='1000'>
            <zone h='98000' id='5' type-v2='layout-basic' w='98666' x='667' y='1000'>
              <zone h='52750' id='3' name='Sheet 7A' w='82021' x='667' y='1000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='45250' id='9' name='Sheet 7B' w='98666' x='667' y='53750'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='52750' id='8' name='Sheet 7A' pane-specification-id='6' param='[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[attr:neighbourhood:nk]' type-v2='color' w='16645' x='82688' y='1000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
            </zone>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
      </zones>
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <size maxheight='700' minheight='700' sizing-mode='vscroll' />
          <zones>
            <zone h='100000' id='11' type-v2='layout-basic' w='100000' x='0' y='0'>
              <zone h='98000' id='10' param='vert' type-v2='layout-flow' w='98666' x='667' y='1000'>
                <zone fixed-size='280' h='52750' id='3' is-fixed='true' name='Sheet 7A' w='82021' x='667' y='1000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='52750' id='8' name='Sheet 7A' pane-specification-id='6' param='[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[attr:neighbourhood:nk]' type-v2='color' w='16645' x='82688' y='1000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='45250' id='9' is-fixed='true' name='Sheet 7B' w='98666' x='667' y='53750'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
              </zone>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='8' />
              </zone-style>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{5AF13361-3158-4373-8773-1AD077A0C613}' />
    </dashboard>
  </dashboards>
  <windows saved-dpi-scale-factor='1.25' source-height='37'>
    <window class='worksheet' name='Sheet 1'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[none:room_type:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[none:Calculation_1332221083686854656:qk]</field>
            <field>[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[none:Calculation_1332221083686928385:qk]</field>
            <field>[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[none:neighbourhood_group:nk]</field>
            <field>[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[none:room_type:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{54A8DEBD-8495-4744-BED8-2763192B2222}' />
    </window>
    <window class='worksheet' name='Sheet 2'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='fit-height' />
        <highlight>
          <color-one-way>
            <field>[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[none:neighbourhood:nk]</field>
            <field>[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[none:neighbourhood_group:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{2FF007F8-11E4-4590-BF8A-EB97A9D0E230}' />
    </window>
    <window class='worksheet' name='Sheet 3'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[none:host_id:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{165492DC-5C54-4D1F-95A4-C8D2171D09EC}' />
    </window>
    <window class='worksheet' name='Sheet 4'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <simple-id uuid='{D840C359-E8AF-4E43-B671-3837E14C49FC}' />
    </window>
    <window class='worksheet' maximized='true' name='Sheet 5'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card AVG='true' KURTOSIS='false' MAX='false' MEDIAN='true' MIN='false' QUART1='true' QUART3='true' SKEWNESS='false' STDEV='false' SUM='false' type='summary' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[none:bathrooms_text:nk]</field>
            <field>[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[none:bedrooms:qk]</field>
            <field>[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[none:host_id:ok]</field>
            <field>[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[none:id:ok]</field>
            <field>[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[none:neighbourhood:nk]</field>
            <field>[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[none:price:qk]</field>
            <field>[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[none:room_type:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{2F1A3044-2F14-4C5C-8FDA-7B4C5C651773}' />
    </window>
    <window class='worksheet' name='Sheet 6A'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card AVG='true' KURTOSIS='false' MAX='false' MEDIAN='true' MIN='false' QUART1='true' QUART3='true' SKEWNESS='false' STDEV='false' SUM='false' type='summary' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[none:bathrooms_text:nk]</field>
            <field>[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[none:bedrooms:qk]</field>
            <field>[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[none:host_id:ok]</field>
            <field>[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[none:id:ok]</field>
            <field>[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[none:neighbourhood:nk]</field>
            <field>[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[none:price:qk]</field>
            <field>[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[none:room_type:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{27363EED-3476-4350-BBA3-73046FA26EC0}' />
    </window>
    <window class='worksheet' name='Sheet 6B'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card AVG='true' KURTOSIS='false' MAX='false' MEDIAN='true' MIN='false' QUART1='true' QUART3='true' SKEWNESS='false' STDEV='false' SUM='false' type='summary' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[none:bathrooms_text:nk]</field>
            <field>[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[none:bedrooms:qk]</field>
            <field>[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[none:host_id:ok]</field>
            <field>[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[none:id:ok]</field>
            <field>[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[none:neighbourhood:nk]</field>
            <field>[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[none:price:qk]</field>
            <field>[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[none:room_type:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{7352EFDC-B5F2-483C-94CE-5796DB3644EC}' />
    </window>
    <window class='worksheet' name='Sheet 7A'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='6' param='[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[attr:neighbourhood:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[Neighbourhood (group)]</field>
            <field>[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[attr:neighbourhood:nk]</field>
            <field>[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[io:Neighbourhood Set:nk]</field>
            <field>[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[none:id:ok]</field>
            <field>[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[none:neighbourhood_group:nk]</field>
            <field>[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[none:price:qk]</field>
          </color-one-way>
        </highlight>
        <default-map-tool-selection tool='1' />
      </viewpoint>
      <simple-id uuid='{CF6CC2A7-F96B-4FBA-9E6E-016FA53B018D}' />
    </window>
    <window class='worksheet' name='Sheet 7B'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0f4ssrh1y2bh0s12kul5x14vekgt].[none:bedrooms:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{F5BC293B-D7FE-4152-8D2E-219985734846}' />
    </window>
    <window class='worksheet' name='Sheet 10'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <simple-id uuid='{726A323A-B304-4DE9-B2DA-D63E244E03EE}' />
    </window>
    <window class='dashboard' name='Dashboard 1'>
      <viewpoints>
        <viewpoint name='Sheet 6A' />
        <viewpoint name='Sheet 6B' />
      </viewpoints>
      <active id='-1' />
      <simple-id uuid='{EDDEC3DF-AC5C-44B1-986F-146588B55572}' />
    </window>
    <window class='dashboard' name='Dashboard 2'>
      <viewpoints>
        <viewpoint name='Sheet 7A'>
          <zoom type='entire-view' />
          <default-map-tool-selection tool='1' />
        </viewpoint>
        <viewpoint name='Sheet 7B'>
          <zoom type='entire-view' />
        </viewpoint>
      </viewpoints>
      <active id='-1' />
      <simple-id uuid='{F905A827-24B6-4A73-BFF9-052BE7F6BBE3}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Dashboard 1' width='192'>
      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
      v+o6Xnt700EvAdz2j+e54Ht34P5aLwhUee+Pj3HFldfwk8f/OP50sLWae2+/iYsvvJDLr/pf
      /vrBjv18rZs2/J0L95Thwosu5u5fPE73yGT8qQM8/8BdPP/mp19DWQ7OcPNGvnPZtdT3jN1L
      1162ngsuuIG+0GSdXw9ECGAK+F0jtPb6ufTqazh5YQaP33cXm1uGDgiXPX8l115xLqav87gb
      ycHbb3/KN69ey6uP3jb+2D06QELuIq685hqOK07g0Yd+QUv/XmdRv2uUfmeQi6+4lisvO5/m
      T9/gd29+Oi3vbZP9blrbO/DvafBBj4PW1k5CU3BpmXYukf9xGKwce/wJRC4v5M1X/0arbZCR
      T57m34PJHBPRw04pnwvnBHno1SaOP3Yx9p5mHnv012yvbSNp3mm89NAP+PjNl3nm5b8RMMSx
      5oZbOee4uWx/9zV+/eyfGPWp5K9YzRP3XDOeZVfdZh5+7CmabHbmrTiNW2++lvd+cz9bW/sx
      PPdzKqor+NPDtwKQtfBk1mQPMTQyQl+thpSMHOKi9ncW1RnMZOXkYXC1YzJHkTkzGVXy848/
      /obf/+UddLEZXP+jOzl+fjYNW9/mV+t+y0hIj+wYYslS8DpauOr8H/PdO67j9d88za1P/hVv
      1V954revMBLQcdI5l3LjmrNRPUM8u+6XvLOphtj0fG669Q6W5kZz983X4InKZaithqAlndNW
      FPLBO++hSy7llw/dy8y4g3uC7Yvf1c/TDz/EB9vriZtZwM0/vpNFWTHcdf0l+BNKGWipRrZm
      csqyXN59533MafP45YP3ih5gygQdvLv+nzz35FP0qPGU5s4g4HVT++lbvLGhmcLcmUgBHyMO
      F6gBnn3oPhrdsfzk/p/znTOXM7h7Ow8/+QqnX34zl50xh3U/f5hhyc1rL/yByKzF3PqjW1gx
      L3tvfrKTR+77GUraUu7/yY8YqPwnz/zpXU485xLyU2I47uw13HXN+ePBNRqVfzz3cy646BKe
      ebOMK666kuTPCcDZu4urL/k2a679EVFFJ3Pmijm0lb/Hupfe47s33cNZC5J44OGn8bt6eeTh
      x4ifcyo/ufNmMuIigLFvD/vIAM/83+NEpBegDtTwi189xYJvruG2a8/n/ZceY/32dt7905P8
      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
    </thumbnail>
    <thumbnail height='192' name='Dashboard 2' width='192'>
      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
      SUVORK5CYII=
    </thumbnail>
    <thumbnail height='187' name='Sheet 1' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Sheet 10' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAABJ0AAASdAHeZh94
      AAACFUlEQVR4nO3TMQEAIAzAMMC/5yFjRxMFfXpnZg5Eve0A2GQA0gxAmgFIMwBpBiDNAKQZ
      gDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFI
      MwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQD
      kGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBp
      BiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA
      0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDN
      AKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxA
      mgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZ
      gDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFI
      MwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKR9Y+0F
      fBUOM1sAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Sheet 2' width='192'>
      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
      AElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Sheet 3' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Sheet 4' width='192'>
      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
    </thumbnail>
    <thumbnail height='87' name='Sheet 5' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAABXCAYAAABSv0r8AAAACXBIWXMAABJ0AAASdAHeZh94
      AAAFAElEQVR4nO3bf0jcdRzH8de6HKczve9tC7fYUDDKiUsnG7gRRA1jtlgIkYkDY2Rtk4QE
      /1ihOLj+CkJKyFicUHP7o4mlnTjGqD/0QjFN07kStAUz1va988f9QD0+/bFIz69tO7gf+n2/
      Hv95d8j7Dd/nfb/3Pd2ilFIgEuqxRA9AlEgMgERjACQaAyDRGACJxgBINAZAoj00AL/fH485
      Nqz5+flEj5BQZt+fZwASjQGQaAyARGMAJBoDINEYAInGAEg0BkCiMQASjQGQaAyARGMAJBoD
      INEYAInGAEg0BkCiMQASjQGQaAyARGMAJBoDINEYAInGAEg0BkCiMQASjQGQaAyARGMAJBoD
      INEYAInGAEg0BkCiMQASjQGQaAyARGMAJBoDINEYAInGAEg0BkCiMQASjQGQaAyARGMAJBoD
      INEYAInGAEg0BkCiMQASjQGQaFuUUupBL/D7/fGahSjuHn+UF6WkpMR6jg3L7/dzfxPvz0sg
      Eo0BkGgMgERjACTaQ+8CEZkZzwAkGgMg0RgAicYASDQGQKIxABLtkf4WKEzoLgbbPsdX7j8R
      QDL2FJ3Eu+WF2GGJwXRxsYQ7A+34+js3Ju8EELIk48ncV1FV9RL2JK28yjfZjVanCyN3F7F1
      x36UvFWJY9nbEjd2LOg/4OMPL+H3jNfQWH8MGaueMu3+KiIBNeKsVbUX+pW+qJRa1FX/hVpV
      6xxRgch+0Ybx2+U6VdfUoYZvB9SyUkot6mr8ikNVN/+0stNMj3JUO1TnVEAtq2UVmOpUjmqH
      6plJ3NzRt6D6Pq1Tzp4rqrHRpcJWM/H+kV0C6b1wTR7G2cqD0JIAJGk4WHkWhydd6NVjE2is
      PfF8DT567wSe22WFBQCSNOSUliD/l18xAQAIYfzaVaSV1+B4phUWWGDNPI6a8jRcvTaOUEKn
      jx6f24mO1AqU7U9e84y5948ogODNG/AeKEDW6ssdSxYKDnhx42YwyqPFR8bu3TBcvfkWsGDX
      kA4AuIWJsUwUFoSf7rcVFCJzbAK34jNmbPnccHakoqIsD1bDk2befzayALxeHdvtdsPjdvt2
      6F5v1MZKKN8k2ps6kfrGy8gCAMzCE7RDW3tkWDXYgx7Mxn/CKPNh8GI3UivKkGc8+mHu/Wci
      /xCs2dINj6XbNCAQlYkSKIS50W/wyZdjePrUB6jMW/WOp2mwGV5vg6bFcbwY8Q1exLdbX8e5
      9Y/++0y7fzDy26Aer7H5Wa8nKuMkTGgOo22NqG8HSs83oDwvLfyyyOOB8fzmhWeTrw3fMC53
      paL85HqXPquYdX9EeBvUZrPj3owOIPwsoOv3YN9lfI/YHHwYbnXApb0NR0M2jDf20qFZdXiC
      QNhREvRAt2owng83j797Xei//Qf6z/xoeK7hnQ7g0Gm0nDLv/sBTkQVgfSYHtu+HMHUia+WD
      cGgKQz/bkPP+A99DNiyf24lLeBP1pesd/ACwF8/mTuP6kA9FRSuv8A0NYjr3ReyN16AxsLP4
      HFqK1zz4VzfOfwFU/fc9QMi0+wM7I7wEsh9BSXYfmlsH4FkCsOTBQGsz+rJLcMT42XgTmMVA
      r44XXsn/n4MfACzYd7QYc21N6JoOIoQQgtNdaGqbQ/HRfcY7SKZj7v0j/4cYU30TPIrWM5/B
      ve7N7EM43XIK+f/+ZNpvQtcynAHuM+v+/I8wEo1/DEeiMQASjQGQaP8AEvZTaxeax60AAAAA
      SUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Sheet 6A' width='192'>
      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
      IJT2//cuxijYR9/5AAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='87' name='Sheet 6B' width='192'>
      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
      1hgA0tp/GoZl5ubZ/hoAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Sheet 7A' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Sheet 7B' width='192'>
      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
    </thumbnail>
  </thumbnails>
</workbook>
